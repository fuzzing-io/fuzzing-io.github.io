Interested in vulnerability mitigation technology? Windows Vista Exploitation Countermeasures takes a low-level look at the new memory hardening features in Windows Vista. Windows Vista's memory allocator is heavily armored against exploitation with the addition of address space layout randomization and continued improvements to the heap allocator. Come learn how these technologies stood up in an internal security review.

Operating system vendors are in a unique position that allows them to create new technology to act as mitigations against exploitation techniques. New memory hardening features in Windows Vista will change the way researchers approach writing exploits for software vulnerabilities. This talk will examine the implementations of the address space layout randomization and heap mitigations in order to gain a better understanding of how these protections will place hurdles in the way of successful exploitation. We will discuss the testing methodology used to evaluate the new features and analyze how much wiggle room is left for real-world exploit scenarios. 

Address Space Layout Randomization
   The History of ASLR
   Architectural Considerations
   Vista ASLR Technical Details
   Testing Methodology

Dynamic Memory Allocator		
   A Short Lesson in Heap Exploitation
   Windows Vista Heap Hardening 
   Windows Vista Low-Fragmentation Heap
   Testing Methodology


Richard Johnson is a security researcher with interests in vulnerability mitigations, reverse engineering, and exploit development. Richard is currently working with the Secure Windows Iniative group at Microsoft.

Previous research: 

22nd CCC, December 2005   - Disassembler Internals II: Automated Data Structure Recognition
Toorcon 7, September 2005 - x86 Disassembler Internals
Interz0ne 4 April 2005    - Automated Debugging and Process Analysis
Toorcon 6, September 2004 - Hooking the Linux ELF Loader
BlackHat USA, July 2004   - A Comparison of Buffer Overflow Prevention Implementations and Weaknesses
Interz0ne 3, April 2004   - Advanced Shellcode Implementations

Materials and code can be found at http://rjohnson.uninformed.org